import { EventEmitter, Input, Output, Directive } from '@angular/core';
// import { Chart, ChartConfiguration, ChartEvent, DefaultDataPoint, registerables } from 'chart.js';
import Chart from 'chart.js/auto';
import { deepCopyJson, mergeJson } from './ng-chartjs.service';
import { getColors } from './colors';
import * as i0 from "@angular/core";
import * as i1 from "./ng-chartjs.service";
import * as i2 from "./store.service";
/* tslint:disable-next-line */
export class NgChartjsDirective {
    constructor(element, ngChartjsService, storeService, zone) {
        this.ngChartjsService = ngChartjsService;
        this.storeService = storeService;
        this.zone = zone;
        // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut
        this.labels = [];
        this.noZone = true; // disable angular NgZone
        // @ts-ignore
        this.id = null; // chart instance id
        // 鼠标点击图表所有的区域
        this.chartClick = new EventEmitter();
        // 鼠标悬浮在标签或者活跃的点上面时
        this.chartHover = new EventEmitter();
        this.initFlag = false;
        this.hasChanges = false;
        this.element = element; // 获取指令所在canvas元素
    }
    ngOnInit() {
        this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx
        this.initFlag = true; // 是否初始化了的标志
        if (this.data || this.datasets) { // 判断data和datasets有一个有数据就刷新
            if (this.noZone) {
                this.zone.runOutsideAngular(() => {
                    this.refresh();
                });
            }
            else {
                this.refresh();
            }
        }
    }
    ngOnChanges(changes) {
        // TODO: 插件变化刷新，开放刷新按钮
        if (this.initFlag) {
            // Check if the changes are in the data or datasets
            if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                if (changes.data) {
                    this.updateChartData(changes.data.currentValue);
                }
                else {
                    this.updateChartData(changes.datasets.currentValue);
                }
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('labels')) {
                this.chart.data.labels = changes.labels.currentValue;
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('legend')) {
                if (changes.legend.currentValue !== changes.legend.previousValue) {
                    // @ts-ignore
                    this.chart.options.plugins.legend.display = changes.legend.currentValue;
                    this.hasChanges = true;
                }
            }
            if (changes.hasOwnProperty('adding')) {
                this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('removing')) {
                if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {
                    this.removeData_(changes.removing.currentValue.orientation);
                    this.hasChanges = true;
                }
            }
            if (changes.hasOwnProperty('chartType')) {
                this.refresh();
            }
            if (changes.hasOwnProperty('resetOption')) {
                const resetOption = deepCopyJson(changes.resetOption.currentValue);
                this.chart.options = mergeJson(resetOption, this.chart.options);
                this.hasChanges = true;
            }
            if (this.hasChanges) {
                this.chart.update();
                this.hasChanges = false;
            }
            // change chart id
            if (changes.hasOwnProperty('id')) {
                this.removeChart(changes.id.previousValue);
                this.addChart(changes.id.currentValue);
            }
        }
    }
    ngOnDestroy() {
        if (this.chart) {
            this.chart.destroy();
            // @ts-ignore
            this.chart = void 0;
            this.removeChart(this.id);
        }
    }
    // update chartjs
    update() {
        this.chart.update();
    }
    // Dynamic add data
    addData(labels, data) {
        this.addData_(labels, data);
        this.update();
    }
    // Dynamic remove data, orientation is 'ildest' or 'latest'
    removeData(orientation) {
        this.removeData_(orientation);
        this.update();
    }
    refresh() {
        this.ngOnDestroy();
        this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
        this.addChart(this.id);
    }
    removeChart(id) {
        if (this.element.nativeElement.hasAttribute('id')) {
            this.storeService.removeChart(this.element.nativeElement.id);
            return;
        }
        if (id !== null && id !== undefined) {
            this.storeService.removeChart(id); // delete chart instance.
        }
    }
    addChart(id) {
        if (this.element.nativeElement.hasAttribute('id')) {
            this.storeService.addChart(this.element.nativeElement.id, this.chart);
            return;
        }
        if (id !== null && id !== undefined) {
            this.storeService.addChart(id, this.chart);
        }
    }
    updateChartData(newDataValues) {
        if (Array.isArray(newDataValues[0].data)) {
            // @ts-ignore
            this.chart.data.datasets.forEach((dataset, i) => {
                dataset.data = newDataValues[i].data;
                if (newDataValues[i].label) {
                    dataset.label = newDataValues[i].label;
                }
            });
        }
        else {
            // @ts-ignore
            this.chart.data.datasets[0].data = newDataValues;
        }
        // update colors
        // @ts-ignore
        this.chart.data.datasets = this.updateColors(this.chart.data.datasets);
    }
    getChartBuilder(ctx /*, data:Array<any>, options:any*/) {
        const datasets = this.getDatasets();
        let options = Object.assign({}, this.options); // 深复制options
        mergeJson(options, {
            plugins: {
                legend: {
                    display: this.legend
                }
            }
        });
        // hock for onHover and onClick events
        options.hover = options.hover || {};
        if (!options.onHover) {
            options.onHover = (event, active) => {
                if (active && !active.length) {
                    return;
                }
                this.chartHover.emit({ event, active });
            };
        }
        if (!options.onClick) {
            options.onClick = (event, active) => {
                this.chartClick.emit({ event, active });
            };
        }
        const opts = {
            type: this.chartType,
            data: {
                labels: this.labels,
                datasets: datasets // TODO: 后续更改这个属性名字，否则警告
            },
            options: options,
            plugins: this.inlinePlugins
        };
        return new Chart(ctx, opts);
    }
    // 获取 chart.js的datasets数据
    getDatasets() {
        // @ts-ignore
        let datasets = void 0;
        // in case if datasets is not provided, but data is present
        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
            if (Array.isArray(this.data[0])) {
                datasets = this.data.map((data, index) => {
                    return { data, label: this.labels[index] || `Label ${index}` };
                });
            }
            else {
                datasets = [{ data: this.data, label: `Label 0` }];
            }
        }
        datasets = this.updateColors(datasets); // update colors
        if (!datasets) {
            throw new Error(`ng-chartjs configuration error,
      data or datasets field are required to render char ${this.chartType}`);
        }
        return datasets;
    }
    // update dataset colors
    updateColors(datasets) {
        if (this.datasets && this.datasets.length || (datasets && datasets.length)) {
            // fix elm type, pre type is number
            datasets = (this.datasets || datasets).map((elm, index) => {
                const newElm = Object.assign({}, elm);
                if (this.colors && this.colors.length) {
                    Object.assign(newElm, this.colors[index]);
                }
                else {
                    // @ts-ignore
                    Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));
                }
                return newElm;
            });
        }
        return datasets;
    }
    addData_(labels, data) {
        if (labels.length === 0 || data.length === 0) {
            return;
        }
        // update labels
        // @ts-ignore
        labels.forEach((label) => { this.chart.data.labels.push(label); });
        // @ts-ignore
        this.chart.data.datasets.forEach((dataset, index) => {
            if (data[index]) {
                for (let i = 0; i < data[index].length; i++) {
                    // @ts-ignore
                    dataset.data.push(data[index][i]);
                }
            }
            else {
                console.log('The added data does not match the original data');
                return;
            }
        });
    }
    removeData_(orientation) {
        // fix: support to oldest feature
        if (orientation === 'latest') {
            // @ts-ignore
            this.chart.data.labels.pop();
            // @ts-ignore
            this.chart.data.datasets.forEach((dataset) => {
                // @ts-ignore
                dataset.data.pop();
            });
        }
        else if (orientation === 'oldest') {
            // @ts-ignore
            this.chart.data.labels.shift();
            // @ts-ignore
            this.chart.data.datasets.forEach((dataset) => {
                // @ts-ignore
                dataset.data.shift();
            });
        }
    }
}
NgChartjsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NgChartjsDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgChartjsService }, { token: i2.StoreService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgChartjsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: NgChartjsDirective, selector: "canvas[ngChartjs]", inputs: { data: "data", datasets: "datasets", labels: "labels", options: "options", inlinePlugins: "inlinePlugins", chartType: "chartType", colors: "colors", legend: "legend", adding: "adding", removing: "removing", resetOption: "resetOption", noZone: "noZone", id: "id" }, outputs: { chartClick: "chartClick", chartHover: "chartHover" }, exportAs: ["ngChartjs"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NgChartjsDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'canvas[ngChartjs]', exportAs: 'ngChartjs' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgChartjsService }, { type: i2.StoreService }, { type: i0.NgZone }]; }, propDecorators: { data: [{
                type: Input
            }], datasets: [{
                type: Input
            }], labels: [{
                type: Input
            }], options: [{
                type: Input
            }], inlinePlugins: [{
                type: Input
            }], chartType: [{
                type: Input
            }], colors: [{
                type: Input
            }], legend: [{
                type: Input
            }], adding: [{
                type: Input
            }], removing: [{
                type: Input
            }], resetOption: [{
                type: Input
            }], noZone: [{
                type: Input
            }], id: [{
                type: Input
            }], chartClick: [{
                type: Output
            }], chartHover: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,