(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('chart.js/auto'), require('chart.js')) :
    typeof define === 'function' && define.amd ? define('ng-chartjs', ['exports', '@angular/core', 'chart.js/auto', 'chart.js'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ng-chartjs"] = {}, global.ng.core, global.chart_js, global.chart_js));
})(this, (function (exports, i0, Chart, chart_js) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var Chart__default = /*#__PURE__*/_interopDefaultLegacy(Chart);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var StoreService = /** @class */ (function () {
        function StoreService() {
            this._chartInstances = [];
            this._chartId = [];
        }
        StoreService.prototype.addChart = function (id, chart) {
            for (var i = 0; i < this._chartId.length; i++) {
                if (id === this._chartId[i]) {
                    return;
                }
            }
            this._chartId.push(id);
            this._chartInstances.push(chart);
        };
        StoreService.prototype.removeChart = function (id) {
            for (var i = 0; i < this._chartId.length; i++) {
                if (id === this._chartId[i]) {
                    this._chartId.splice(i, 1);
                    this._chartInstances.splice(i, 1); // delete chart instance.
                }
            }
        };
        StoreService.prototype.getChart = function (id) {
            for (var i = 0; i < this._chartId.length; i++) {
                if (id === this._chartId[i]) {
                    return this._chartInstances[i];
                }
            }
            return null;
        };
        return StoreService;
    }());
    StoreService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: StoreService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    StoreService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: StoreService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: StoreService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }] });

    var NgChartjsCustomPluginConfig = /** @class */ (function () {
        function NgChartjsCustomPluginConfig() {
            this.plugins = [];
        }
        return NgChartjsCustomPluginConfig;
    }());
    NgChartjsCustomPluginConfig.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsCustomPluginConfig, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    NgChartjsCustomPluginConfig.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsCustomPluginConfig, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsCustomPluginConfig, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }] });

    var NgChartjsService = /** @class */ (function () {
        function NgChartjsService(storeService, pluginConfig) {
            this.storeService = storeService;
            this.pluginConfig = pluginConfig;
            if (pluginConfig.plugins.length !== 0) {
                chart_js.Chart.register.apply(chart_js.Chart, __spreadArray([], __read(pluginConfig.plugins)));
            }
        }
        // get chart instance by id
        NgChartjsService.prototype.getChart = function (id) {
            return this.storeService.getChart(id);
        };
        return NgChartjsService;
    }());
    NgChartjsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsService, deps: [{ token: StoreService }, { token: NgChartjsCustomPluginConfig }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    NgChartjsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: StoreService }, { type: NgChartjsCustomPluginConfig }]; } });
    /**
     * 深复制一个json对象
     * @source 需要深复制的对象
     */
    function deepCopyJson(source) {
        if (!source || typeof source !== 'object') {
            return source;
        }
        var newObj = source.constructor === Array ? [] : {};
        for (var key in source) {
            if (typeof source[key] === 'object') {
                // @ts-ignore
                newObj[key] = deepCopyJson(source[key]);
            }
            else {
                // @ts-ignore
                newObj[key] = source[key];
            }
        }
        return newObj;
    }
    /**
    * 合并json对象,遇到相同元素级属性，以source为准
    * @source 被合并的json对象
    * @dest json对象，将此json的属性递归赋值给source
    */
    function mergeJson(source, dest) {
        var e_1, _a;
        if (!dest) {
            return source;
        }
        source = source || {};
        try {
            for (var _b = __values(Object.keys(dest)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (source[key] === undefined) {
                    source[key] = deepCopyJson(dest[key]);
                    continue;
                }
                // 冲突了，如果是Object，看看有么有不冲突的属性
                // 不是Object 则以main为主，忽略即可。故不需要else
                if (isJson(dest[key])) {
                    // arguments.callee 递归调用，并且与函数名解耦
                    mergeJson(source[key], dest[key]);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return source;
    }
    /**
    * 是否是json对象
    * @target 需要被判断的类型
    */
    function isJson(target) {
        if (target === null || target === undefined) {
            return false;
        }
        return typeof target === 'object' && target.constructor === Object;
    }

    // Default colors
    var DefaultColors = [
        [63, 81, 181],
        [0, 150, 136],
        [255, 152, 0],
        [233, 30, 99],
        [156, 39, 176],
        [0, 188, 212],
        [3, 169, 244],
        [96, 125, 139],
        [255, 193, 7],
        [37, 155, 36],
        [205, 220, 57],
        [86, 119, 252] // Blue
    ];
    function rgba(colour, alpha) {
        return 'rgba(' + colour.concat(alpha).join(',') + ')';
    }
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    function formatLineColor(colors) {
        return {
            backgroundColor: rgba(colors, 0.35),
            borderColor: rgba(colors, 1),
            pointBackgroundColor: rgba(colors, 1),
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: rgba(colors, 0.95)
        };
    }
    function formatBarColor(colors) {
        return {
            backgroundColor: rgba(colors, 0.75),
            borderColor: rgba(colors, 1),
            hoverBackgroundColor: rgba(colors, 1),
            hoverBorderColor: rgba(colors, 1)
        };
    }
    function formatPieColors(colors) {
        return {
            backgroundColor: colors.map(function (color) { return rgba(color, 0.76); }),
            borderColor: colors.map(function () { return '#fff'; }),
            pointBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            pointBorderColor: colors.map(function () { return '#fff'; }),
            pointHoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            pointHoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
        };
    }
    function formatPolarAreaColors(colors) {
        return {
            backgroundColor: colors.map(function (color) { return rgba(color, 0.75); }),
            borderColor: colors.map(function (color) { return rgba(color, 1); }),
            hoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            hoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
        };
    }
    function getRandomColor() {
        return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
    }
    /**
    * @method Generate colors for line|bar charts
    * @param index he index of the default color array. eg. 0, 1
    * @return number[]
    * @author vincent 2019-01-22
    * @version 0.0.0
    * @example
    * @log 1. vincent,2019-01-22,done
    */
    function generateColor(index) {
        return DefaultColors[index] || getRandomColor();
    }
    /**
    * @method Generate colors for pie|doughnut charts
    * @param count Length of data. eg. datasets.data.length
    * @return number[][]
    * @author vincent 2019-01-22
    * @version 0.0.0
    * @example
    * @log 1. vincent,2019-01-22,done
    */
    function generateColors(count) {
        var colorsArr = new Array(count);
        for (var i = 0; i < count; i++) {
            colorsArr[i] = DefaultColors[i] || getRandomColor();
        }
        return colorsArr;
    }
    /**
    * @method Generate colors by chart type
    * @param chartType The type of chart you are using. eg. line,bar
    * @param index The index of the default color array. eg. DefaultColors[index]
    * @param count Length of data. eg. datasets.data.length
    * @return Color or number[]
    * @author vincent 2019-01-22
    * @version 0.0.0
    * @example
    * @log 1. vincent,2019-01-22,done
    */
    function getColors(chartType, index, count) {
        if (chartType === 'pie' ||
            chartType === 'doughnut' ||
            chartType === 'bubble' ||
            chartType === 'scatter') {
            return formatPieColors(generateColors(count));
        }
        if (chartType === 'polarArea') {
            return formatPolarAreaColors(generateColors(count));
        }
        if (chartType === 'line' || chartType === 'radar') {
            return formatLineColor(generateColor(index));
        }
        if (chartType === 'bar' || chartType === 'horizontalBar') {
            return formatBarColor(generateColor(index));
        }
        return generateColor(index);
    }

    /* tslint:disable-next-line */
    var NgChartjsDirective = /** @class */ (function () {
        function NgChartjsDirective(element, ngChartjsService, storeService, zone) {
            this.ngChartjsService = ngChartjsService;
            this.storeService = storeService;
            this.zone = zone;
            // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut
            this.labels = [];
            this.noZone = true; // disable angular NgZone
            // @ts-ignore
            this.id = null; // chart instance id
            // 鼠标点击图表所有的区域
            this.chartClick = new i0.EventEmitter();
            // 鼠标悬浮在标签或者活跃的点上面时
            this.chartHover = new i0.EventEmitter();
            this.initFlag = false;
            this.hasChanges = false;
            this.element = element; // 获取指令所在canvas元素
        }
        NgChartjsDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx
            this.initFlag = true; // 是否初始化了的标志
            if (this.data || this.datasets) { // 判断data和datasets有一个有数据就刷新
                if (this.noZone) {
                    this.zone.runOutsideAngular(function () {
                        _this.refresh();
                    });
                }
                else {
                    this.refresh();
                }
            }
        };
        NgChartjsDirective.prototype.ngOnChanges = function (changes) {
            // TODO: 插件变化刷新，开放刷新按钮
            if (this.initFlag) {
                // Check if the changes are in the data or datasets
                if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                    if (changes.data) {
                        this.updateChartData(changes.data.currentValue);
                    }
                    else {
                        this.updateChartData(changes.datasets.currentValue);
                    }
                    this.hasChanges = true;
                }
                if (changes.hasOwnProperty('labels')) {
                    this.chart.data.labels = changes.labels.currentValue;
                    this.hasChanges = true;
                }
                if (changes.hasOwnProperty('legend')) {
                    if (changes.legend.currentValue !== changes.legend.previousValue) {
                        // @ts-ignore
                        this.chart.options.plugins.legend.display = changes.legend.currentValue;
                        this.hasChanges = true;
                    }
                }
                if (changes.hasOwnProperty('adding')) {
                    this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);
                    this.hasChanges = true;
                }
                if (changes.hasOwnProperty('removing')) {
                    if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {
                        this.removeData_(changes.removing.currentValue.orientation);
                        this.hasChanges = true;
                    }
                }
                if (changes.hasOwnProperty('chartType')) {
                    this.refresh();
                }
                if (changes.hasOwnProperty('resetOption')) {
                    var resetOption = deepCopyJson(changes.resetOption.currentValue);
                    this.chart.options = mergeJson(resetOption, this.chart.options);
                    this.hasChanges = true;
                }
                if (this.hasChanges) {
                    this.chart.update();
                    this.hasChanges = false;
                }
                // change chart id
                if (changes.hasOwnProperty('id')) {
                    this.removeChart(changes.id.previousValue);
                    this.addChart(changes.id.currentValue);
                }
            }
        };
        NgChartjsDirective.prototype.ngOnDestroy = function () {
            if (this.chart) {
                this.chart.destroy();
                // @ts-ignore
                this.chart = void 0;
                this.removeChart(this.id);
            }
        };
        // update chartjs
        NgChartjsDirective.prototype.update = function () {
            this.chart.update();
        };
        // Dynamic add data
        NgChartjsDirective.prototype.addData = function (labels, data) {
            this.addData_(labels, data);
            this.update();
        };
        // Dynamic remove data, orientation is 'ildest' or 'latest'
        NgChartjsDirective.prototype.removeData = function (orientation) {
            this.removeData_(orientation);
            this.update();
        };
        NgChartjsDirective.prototype.refresh = function () {
            this.ngOnDestroy();
            this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
            this.addChart(this.id);
        };
        NgChartjsDirective.prototype.removeChart = function (id) {
            if (this.element.nativeElement.hasAttribute('id')) {
                this.storeService.removeChart(this.element.nativeElement.id);
                return;
            }
            if (id !== null && id !== undefined) {
                this.storeService.removeChart(id); // delete chart instance.
            }
        };
        NgChartjsDirective.prototype.addChart = function (id) {
            if (this.element.nativeElement.hasAttribute('id')) {
                this.storeService.addChart(this.element.nativeElement.id, this.chart);
                return;
            }
            if (id !== null && id !== undefined) {
                this.storeService.addChart(id, this.chart);
            }
        };
        NgChartjsDirective.prototype.updateChartData = function (newDataValues) {
            if (Array.isArray(newDataValues[0].data)) {
                // @ts-ignore
                this.chart.data.datasets.forEach(function (dataset, i) {
                    dataset.data = newDataValues[i].data;
                    if (newDataValues[i].label) {
                        dataset.label = newDataValues[i].label;
                    }
                });
            }
            else {
                // @ts-ignore
                this.chart.data.datasets[0].data = newDataValues;
            }
            // update colors
            // @ts-ignore
            this.chart.data.datasets = this.updateColors(this.chart.data.datasets);
        };
        NgChartjsDirective.prototype.getChartBuilder = function (ctx /*, data:Array<any>, options:any*/) {
            var _this = this;
            var datasets = this.getDatasets();
            var options = Object.assign({}, this.options); // 深复制options
            mergeJson(options, {
                plugins: {
                    legend: {
                        display: this.legend
                    }
                }
            });
            // hock for onHover and onClick events
            options.hover = options.hover || {};
            if (!options.onHover) {
                options.onHover = function (event, active) {
                    if (active && !active.length) {
                        return;
                    }
                    _this.chartHover.emit({ event: event, active: active });
                };
            }
            if (!options.onClick) {
                options.onClick = function (event, active) {
                    _this.chartClick.emit({ event: event, active: active });
                };
            }
            var opts = {
                type: this.chartType,
                data: {
                    labels: this.labels,
                    datasets: datasets // TODO: 后续更改这个属性名字，否则警告
                },
                options: options,
                plugins: this.inlinePlugins
            };
            return new Chart__default["default"](ctx, opts);
        };
        // 获取 chart.js的datasets数据
        NgChartjsDirective.prototype.getDatasets = function () {
            var _this = this;
            // @ts-ignore
            var datasets = void 0;
            // in case if datasets is not provided, but data is present
            if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
                if (Array.isArray(this.data[0])) {
                    datasets = this.data.map(function (data, index) {
                        return { data: data, label: _this.labels[index] || "Label " + index };
                    });
                }
                else {
                    datasets = [{ data: this.data, label: "Label 0" }];
                }
            }
            datasets = this.updateColors(datasets); // update colors
            if (!datasets) {
                throw new Error("ng-chartjs configuration error,\n      data or datasets field are required to render char " + this.chartType);
            }
            return datasets;
        };
        // update dataset colors
        NgChartjsDirective.prototype.updateColors = function (datasets) {
            var _this = this;
            if (this.datasets && this.datasets.length || (datasets && datasets.length)) {
                // fix elm type, pre type is number
                datasets = (this.datasets || datasets).map(function (elm, index) {
                    var newElm = Object.assign({}, elm);
                    if (_this.colors && _this.colors.length) {
                        Object.assign(newElm, _this.colors[index]);
                    }
                    else {
                        // @ts-ignore
                        Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));
                    }
                    return newElm;
                });
            }
            return datasets;
        };
        NgChartjsDirective.prototype.addData_ = function (labels, data) {
            var _this = this;
            if (labels.length === 0 || data.length === 0) {
                return;
            }
            // update labels
            // @ts-ignore
            labels.forEach(function (label) { _this.chart.data.labels.push(label); });
            // @ts-ignore
            this.chart.data.datasets.forEach(function (dataset, index) {
                if (data[index]) {
                    for (var i = 0; i < data[index].length; i++) {
                        // @ts-ignore
                        dataset.data.push(data[index][i]);
                    }
                }
                else {
                    console.log('The added data does not match the original data');
                    return;
                }
            });
        };
        NgChartjsDirective.prototype.removeData_ = function (orientation) {
            // fix: support to oldest feature
            if (orientation === 'latest') {
                // @ts-ignore
                this.chart.data.labels.pop();
                // @ts-ignore
                this.chart.data.datasets.forEach(function (dataset) {
                    // @ts-ignore
                    dataset.data.pop();
                });
            }
            else if (orientation === 'oldest') {
                // @ts-ignore
                this.chart.data.labels.shift();
                // @ts-ignore
                this.chart.data.datasets.forEach(function (dataset) {
                    // @ts-ignore
                    dataset.data.shift();
                });
            }
        };
        return NgChartjsDirective;
    }());
    NgChartjsDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsDirective, deps: [{ token: i0__namespace.ElementRef }, { token: NgChartjsService }, { token: StoreService }, { token: i0__namespace.NgZone }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    NgChartjsDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: NgChartjsDirective, selector: "canvas[ngChartjs]", inputs: { data: "data", datasets: "datasets", labels: "labels", options: "options", inlinePlugins: "inlinePlugins", chartType: "chartType", colors: "colors", legend: "legend", adding: "adding", removing: "removing", resetOption: "resetOption", noZone: "noZone", id: "id" }, outputs: { chartClick: "chartClick", chartHover: "chartHover" }, exportAs: ["ngChartjs"], usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'canvas[ngChartjs]', exportAs: 'ngChartjs' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: NgChartjsService }, { type: StoreService }, { type: i0__namespace.NgZone }]; }, propDecorators: { data: [{
                    type: i0.Input
                }], datasets: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], options: [{
                    type: i0.Input
                }], inlinePlugins: [{
                    type: i0.Input
                }], chartType: [{
                    type: i0.Input
                }], colors: [{
                    type: i0.Input
                }], legend: [{
                    type: i0.Input
                }], adding: [{
                    type: i0.Input
                }], removing: [{
                    type: i0.Input
                }], resetOption: [{
                    type: i0.Input
                }], noZone: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], chartClick: [{
                    type: i0.Output
                }], chartHover: [{
                    type: i0.Output
                }] } });

    var NgChartjsModule = /** @class */ (function () {
        function NgChartjsModule() {
        }
        /**
         * Register a plugin.
         * @param plugins
         */
        NgChartjsModule.registerPlugin = function (plugins) {
            if (plugins === void 0) { plugins = []; }
            var config = new NgChartjsCustomPluginConfig();
            config.plugins = plugins;
            return {
                ngModule: NgChartjsModule,
                providers: [
                    {
                        provide: NgChartjsCustomPluginConfig,
                        useValue: config
                    }
                ]
            };
        };
        return NgChartjsModule;
    }());
    NgChartjsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    NgChartjsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsModule, declarations: [NgChartjsDirective], exports: [NgChartjsDirective] });
    NgChartjsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsModule, providers: [NgChartjsService], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NgChartjsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [NgChartjsDirective],
                        exports: [NgChartjsDirective],
                        providers: [NgChartjsService]
                    }]
            }] });

    /*
     * Public API Surface of ng-chartjs
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DefaultColors = DefaultColors;
    exports.NgChartjsDirective = NgChartjsDirective;
    exports.NgChartjsModule = NgChartjsModule;
    exports.NgChartjsService = NgChartjsService;
    exports.deepCopyJson = deepCopyJson;
    exports.formatBarColor = formatBarColor;
    exports.formatLineColor = formatLineColor;
    exports.formatPieColors = formatPieColors;
    exports.formatPolarAreaColors = formatPolarAreaColors;
    exports.generateColor = generateColor;
    exports.generateColors = generateColors;
    exports.getColors = getColors;
    exports.getRandomColor = getRandomColor;
    exports.getRandomInt = getRandomInt;
    exports.isJson = isJson;
    exports.mergeJson = mergeJson;
    exports.rgba = rgba;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-chartjs.umd.js.map
